CCS PCH C Compiler, Version 5.101Pd, 1               18-févr.-21 22:26
Compiler operating in Evaluation Mode
To obtain a fully enabled compiler visit www.ccsinfo.com/products

               Filename:   D:\OneDrive - EPHEC asbl\2T\Elec\github\ELec2T\CCS\test.lst

               ROM used:   422 bytes (1%)
                           Largest free fragment is 32342
               RAM used:   27 (2%) at main() level
                           34 (2%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 31

*
0000:  GOTO   0158
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  FF0.3
0056:  GOTO   0060
005A:  BTFSC  FF0.0
005C:  GOTO   00AE
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVFF  15,FF5
009A:  MOVFF  16,FF6
009E:  MOVFF  17,FF7
00A2:  MOVF   04,W
00A4:  MOVFF  06,FE0
00A8:  MOVFF  05,FD8
00AC:  RETFIE 0
.................... #include <test.h>
.................... #include <18F458.h>
.................... //////////// Standard Header file for the PIC18F458 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F458
*
00B4:  MOVF   20,W
00B6:  CLRF   01
00B8:  SUBWF  1F,W
00BA:  BC    00C2
00BC:  MOVFF  1F,00
00C0:  BRA    00DA
00C2:  CLRF   00
00C4:  MOVLW  08
00C6:  MOVWF  21
00C8:  RLCF   1F,F
00CA:  RLCF   00,F
00CC:  MOVF   20,W
00CE:  SUBWF  00,W
00D0:  BTFSC  FD8.0
00D2:  MOVWF  00
00D4:  RLCF   01,F
00D6:  DECFSZ 21,F
00D8:  BRA    00C8
00DA:  RETURN 0
.................... 
.................... #list
.................... 
.................... #device ADC=10
.................... 
.................... #FUSES NOWDT                 	//No Watch Dog Timer
.................... 
.................... #use delay(crystal=20000000)
00DC:  CLRF   FEA
00DE:  MOVLW  1E
00E0:  MOVWF  FE9
00E2:  MOVF   FEF,W
00E4:  BZ    0100
00E6:  MOVLW  06
00E8:  MOVWF  01
00EA:  CLRF   00
00EC:  DECFSZ 00,F
00EE:  BRA    00EC
00F0:  DECFSZ 01,F
00F2:  BRA    00EA
00F4:  MOVLW  7B
00F6:  MOVWF  00
00F8:  DECFSZ 00,F
00FA:  BRA    00F8
00FC:  DECFSZ FEF,F
00FE:  BRA    00E6
0100:  RETURN 0
.................... 
.................... 
.................... #define LED_PIN_ALARM PIN_B6
.................... #define LED_PIN_GREEN PIN_B7
.................... #INT_EXT
.................... #define TENS_DISPLAY PIN_E1
.................... #define UNITY_DISPLAY PIN_E0
.................... boolean flag0 =0;
.................... boolean flag1 =0;
.................... 
.................... void  EXT_isr(void) 
.................... {
.................... 
.................... }
.................... 
.................... #INT_EXT1
.................... void  EXT1_isr(void) 
.................... {
.................... 
*
00AE:  BCF    FF0.0
00B0:  GOTO   0060
.................... }
.................... void bitsToBCD(int value) {
*
0102:  MOVFF  1B,1F
0106:  MOVLW  0A
0108:  MOVWF  20
010A:  RCALL  00B4
010C:  MOVFF  01,1F
0110:  MOVLW  0A
0112:  MOVWF  20
0114:  RCALL  00B4
0116:  MOVFF  00,1C
011A:  MOVFF  1B,1F
011E:  MOVLW  0A
0120:  MOVWF  20
0122:  RCALL  00B4
0124:  MOVFF  00,1D
....................    int tens = value / 10 % 10;
....................    int unity = value % 10;
....................    output_high(UNITY_DISPLAY);
0128:  BCF    F96.0
012A:  BSF    F8D.0
....................    output_low(TENS_DISPLAY);
012C:  BCF    F96.1
012E:  BCF    F8D.1
....................    output_d(tens);
0130:  CLRF   F95
0132:  MOVFF  1C,F8C
....................    output_high(TENS_DISPLAY);
0136:  BCF    F96.1
0138:  BSF    F8D.1
....................    
....................    delay_ms(10);
013A:  MOVLW  0A
013C:  MOVWF  1E
013E:  RCALL  00DC
....................    output_low(UNITY_DISPLAY);
0140:  BCF    F96.0
0142:  BCF    F8D.0
....................    output_d(unity);
0144:  CLRF   F95
0146:  MOVFF  1D,F8C
....................    output_low(UNITY_DISPLAY);
014A:  BCF    F96.0
014C:  BCF    F8D.0
....................    delay_ms(10);
014E:  MOVLW  0A
0150:  MOVWF  1E
0152:  RCALL  00DC
0154:  GOTO   0184 (RETURN)
.................... }
.................... void main()
0158:  CLRF   FF8
015A:  BCF    FD0.7
015C:  BSF    07.7
015E:  BCF    19.0
0160:  BCF    19.1
0162:  BSF    FC1.0
0164:  BSF    FC1.1
0166:  BSF    FC1.2
0168:  BCF    FC1.3
016A:  MOVLW  07
016C:  MOVWF  FB4
016E:  CLRF   1A
.................... {
....................    int nb_persone =0;
....................    enable_interrupts(INT_EXT);
0170:  BSF    FF2.4
....................    enable_interrupts(INT_EXT1);
0172:  BSF    FF0.3
....................    enable_interrupts(GLOBAL);
0174:  MOVLW  C0
0176:  IORWF  FF2,F
....................    setup_low_volt_detect(FALSE);
0178:  CLRF   FD2
.................... 
....................    while(TRUE)
....................    {  
....................       output_high(LED_PIN_GREEN);
017A:  BCF    F93.7
017C:  BSF    F8A.7
....................       bitsToBCD(nb_persone);
017E:  MOVFF  1A,1B
0182:  BRA    0102
....................       delay_ms(250);
0184:  MOVLW  FA
0186:  MOVWF  1E
0188:  RCALL  00DC
....................       output_low(LED_PIN_GREEN);
018A:  BCF    F93.7
018C:  BCF    F8A.7
....................       nb_persone++;
018E:  INCF   1A,F
....................       if(nb_persone == 99){
0190:  MOVF   1A,W
0192:  SUBLW  63
0194:  BNZ   01A6
....................          output_high(LED_PIN_ALARM);
0196:  BCF    F93.6
0198:  BSF    F8A.6
....................          delay_ms(250);
019A:  MOVLW  FA
019C:  MOVWF  1E
019E:  RCALL  00DC
....................          nb_persone =0;
01A0:  CLRF   1A
....................          output_low(LED_PIN_ALARM );
01A2:  BCF    F93.6
01A4:  BCF    F8A.6
....................       }
01A6:  BRA    017A
....................       
.................... 
....................    }
.................... 
.................... }
01A8:  SLEEP 

Configuration Fuses:
   Word  1: 2200   HS NOOSCSEN
   Word  2: 0E0E   PUT BROWNOUT BORV25 NOWDT WDT128
   Word  3: 0000  
   Word  4: 0081   STVREN NOLVP NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
