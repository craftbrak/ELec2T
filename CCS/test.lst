CCS PCH C Compiler, Version 5.101Pd, 1               24-févr.-21 15:27
Compiler operating in Evaluation Mode
To obtain a fully enabled compiler visit www.ccsinfo.com/products

               Filename:   D:\OneDrive - EPHEC asbl\2T\Elec\github\ELec2T\CCS\test.lst

               ROM used:   886 bytes (3%)
                           Largest free fragment is 31878
               RAM used:   30 (2%) at main() level
                           38 (2%) worst case
               Stack used: 3 locations (2 in main + 1 for interrupts)
               Stack size: 31

*
0000:  GOTO   02B8
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  FF2.4
0056:  GOTO   0060
005A:  BTFSC  FF2.1
005C:  GOTO   00BA
0060:  BTFSS  FF0.3
0062:  GOTO   006C
0066:  BTFSC  FF0.0
0068:  GOTO   00C2
006C:  MOVFF  0E,00
0070:  MOVFF  0F,01
0074:  MOVFF  10,02
0078:  MOVFF  11,03
007C:  MOVFF  0C,FE9
0080:  MOVFF  07,FEA
0084:  BSF    07.7
0086:  MOVFF  08,FE1
008A:  MOVFF  09,FE2
008E:  MOVFF  0A,FD9
0092:  MOVFF  0B,FDA
0096:  MOVFF  12,FF3
009A:  MOVFF  13,FF4
009E:  MOVFF  14,FFA
00A2:  MOVFF  15,FF5
00A6:  MOVFF  16,FF6
00AA:  MOVFF  17,FF7
00AE:  MOVF   04,W
00B0:  MOVFF  06,FE0
00B4:  MOVFF  05,FD8
00B8:  RETFIE 0
.................... #include <test.h>
.................... #include <18F458.h>
.................... //////////// Standard Header file for the PIC18F458 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F458
*
00CA:  DATA 2A,4E
00CC:  DATA 42,2A
00CE:  DATA 25,64
00D0:  DATA 00,00
00D2:  DATA 2A,4E
00D4:  DATA 42,2A
00D6:  DATA 25,64
00D8:  DATA 00,00
00DA:  DATA 2A,4E
00DC:  DATA 42,2A
00DE:  DATA 25,64
00E0:  DATA 00,00
00E2:  DATA 41,4C
00E4:  DATA 41,52
00E6:  DATA 4D,20
00E8:  DATA 00,00
*
012A:  TBLRD*+
012C:  MOVFF  FF6,1E
0130:  MOVFF  FF7,1F
0134:  MOVFF  FF5,23
0138:  RCALL  00EA
013A:  MOVFF  1E,FF6
013E:  MOVFF  1F,FF7
0142:  DECFSZ 1D,F
0144:  BRA    012A
0146:  RETURN 0
0148:  MOVF   24,W
014A:  CLRF   01
014C:  SUBWF  23,W
014E:  BC    0156
0150:  MOVFF  23,00
0154:  BRA    016E
0156:  CLRF   00
0158:  MOVLW  08
015A:  MOVWF  25
015C:  RLCF   23,F
015E:  RLCF   00,F
0160:  MOVF   24,W
0162:  SUBWF  00,W
0164:  BTFSC  FD8.0
0166:  MOVWF  00
0168:  RLCF   01,F
016A:  DECFSZ 25,F
016C:  BRA    015C
016E:  RETURN 0
0170:  MOVLW  20
0172:  BTFSS  1E.4
0174:  MOVLW  30
0176:  MOVWF  1F
0178:  MOVFF  1D,00
017C:  BTFSS  1D.7
017E:  BRA    0190
0180:  COMF   00,F
0182:  INCF   00,F
0184:  MOVFF  00,1D
0188:  MOVLW  2D
018A:  MOVWF  1F
018C:  BSF    1E.7
018E:  BSF    1E.0
0190:  MOVF   01,W
0192:  MOVFF  1D,23
0196:  MOVLW  64
0198:  MOVWF  24
019A:  RCALL  0148
019C:  MOVFF  00,1D
01A0:  MOVLW  30
01A2:  ADDWF  01,W
01A4:  MOVWF  20
01A6:  MOVFF  1D,23
01AA:  MOVLW  0A
01AC:  MOVWF  24
01AE:  RCALL  0148
01B0:  MOVLW  30
01B2:  ADDWF  00,W
01B4:  MOVWF  22
01B6:  MOVLW  30
01B8:  ADDWF  01,W
01BA:  MOVWF  21
01BC:  MOVFF  1F,00
01C0:  MOVLW  30
01C2:  SUBWF  20,W
01C4:  BZ    01CE
01C6:  BSF    1E.1
01C8:  BTFSC  1E.7
01CA:  BSF    1E.2
01CC:  BRA    01F2
01CE:  MOVFF  1F,20
01D2:  MOVLW  20
01D4:  MOVWF  1F
01D6:  MOVLW  30
01D8:  SUBWF  21,W
01DA:  BZ    01E4
01DC:  BSF    1E.0
01DE:  BTFSC  1E.7
01E0:  BSF    1E.1
01E2:  BRA    01F2
01E4:  BTFSS  FD8.2
01E6:  BSF    1E.0
01E8:  BNZ   01F2
01EA:  MOVFF  20,21
01EE:  MOVLW  20
01F0:  MOVWF  20
01F2:  BTFSC  1E.2
01F4:  BRA    0200
01F6:  BTFSC  1E.1
01F8:  BRA    0206
01FA:  BTFSC  1E.0
01FC:  BRA    020C
01FE:  BRA    0212
0200:  MOVFF  1F,23
0204:  RCALL  00EA
0206:  MOVFF  20,23
020A:  RCALL  00EA
020C:  MOVFF  21,23
0210:  RCALL  00EA
0212:  MOVFF  22,23
0216:  RCALL  00EA
0218:  RETURN 0
*
0296:  TBLRD*+
0298:  MOVF   FF5,F
029A:  BZ    02B4
029C:  MOVFF  FF6,1D
02A0:  MOVFF  FF7,1E
02A4:  MOVFF  FF5,23
02A8:  RCALL  00EA
02AA:  MOVFF  1D,FF6
02AE:  MOVFF  1E,FF7
02B2:  BRA    0296
02B4:  GOTO   0362 (RETURN)
.................... 
.................... #list
.................... 
.................... #device ADC=10
.................... 
.................... #FUSES NOWDT                    //No Watch Dog Timer
.................... 
.................... #use delay(crystal=20000000)
*
021A:  CLRF   FEA
021C:  MOVLW  20
021E:  MOVWF  FE9
0220:  MOVF   FEF,W
0222:  BZ    023E
0224:  MOVLW  06
0226:  MOVWF  01
0228:  CLRF   00
022A:  DECFSZ 00,F
022C:  BRA    022A
022E:  DECFSZ 01,F
0230:  BRA    0228
0232:  MOVLW  7B
0234:  MOVWF  00
0236:  DECFSZ 00,F
0238:  BRA    0236
023A:  DECFSZ FEF,F
023C:  BRA    0224
023E:  RETURN 0
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=PORT1,FORCE_SW)
*
00EA:  BCF    F94.6
00EC:  BCF    F8B.6
00EE:  MOVLW  08
00F0:  MOVWF  01
00F2:  BRA    00F4
00F4:  NOP   
00F6:  BSF    01.7
00F8:  BRA    0116
00FA:  BCF    01.7
00FC:  RRCF   23,F
00FE:  BTFSC  FD8.0
0100:  BSF    F8B.6
0102:  BTFSS  FD8.0
0104:  BCF    F8B.6
0106:  BSF    01.6
0108:  BRA    0116
010A:  BCF    01.6
010C:  DECFSZ 01,F
010E:  BRA    00FC
0110:  BRA    0112
0112:  NOP   
0114:  BSF    F8B.6
0116:  MOVLW  A7
0118:  MOVWF  FE9
011A:  DECFSZ FE9,F
011C:  BRA    011A
011E:  BRA    0120
0120:  BTFSC  01.7
0122:  BRA    00FA
0124:  BTFSC  01.6
0126:  BRA    010A
0128:  RETURN 0
.................... 
.................... #define LED_PIN_ALARM PIN_B6
.................... #define LED_PIN_GREEN PIN_B7
.................... #define TENS_DISPLAY PIN_E1
.................... #define UNITY_DISPLAY PIN_E0
.................... 
.................... boolean flag0 =0;
.................... boolean flag1 =0;
.................... #INT_EXT
.................... void  EXT_isr(void) 
.................... {
....................  flag0 =1;
*
00BA:  BSF    19.0
.................... }
.................... 
00BC:  BCF    FF2.1
00BE:  GOTO   006C
.................... #INT_EXT1
.................... void  EXT1_isr(void) 
.................... {
....................    flag1 =1;
00C2:  BSF    19.1
....................    
00C4:  BCF    FF0.0
00C6:  GOTO   006C
.................... }
.................... void bitsToBCD(int value) {
*
0240:  MOVFF  1D,23
0244:  MOVLW  0A
0246:  MOVWF  24
0248:  RCALL  0148
024A:  MOVFF  01,23
024E:  MOVLW  0A
0250:  MOVWF  24
0252:  RCALL  0148
0254:  MOVFF  00,1E
0258:  MOVFF  1D,23
025C:  MOVLW  0A
025E:  MOVWF  24
0260:  RCALL  0148
0262:  MOVFF  00,1F
....................    int tens = value / 10 % 10;
....................    int unity = value % 10;
....................    output_high(UNITY_DISPLAY);
0266:  BCF    F96.0
0268:  BSF    F8D.0
....................    output_low(TENS_DISPLAY);
026A:  BCF    F96.1
026C:  BCF    F8D.1
....................    output_d(tens);
026E:  CLRF   F95
0270:  MOVFF  1E,F8C
....................    output_high(TENS_DISPLAY);
0274:  BCF    F96.1
0276:  BSF    F8D.1
....................    
....................    delay_ms(10);
0278:  MOVLW  0A
027A:  MOVWF  20
027C:  RCALL  021A
....................    output_low(UNITY_DISPLAY);
027E:  BCF    F96.0
0280:  BCF    F8D.0
....................    output_d(unity);
0282:  CLRF   F95
0284:  MOVFF  1F,F8C
....................    output_low(UNITY_DISPLAY);
0288:  BCF    F96.0
028A:  BCF    F8D.0
....................    delay_ms(10);
028C:  MOVLW  0A
028E:  MOVWF  20
0290:  RCALL  021A
0292:  GOTO   0304 (RETURN)
.................... }
.................... void main()
*
02B8:  CLRF   FF8
02BA:  BCF    FD0.7
02BC:  BSF    07.7
02BE:  BCF    F94.6
02C0:  BSF    F8B.6
02C2:  BCF    19.0
02C4:  BCF    19.1
02C6:  CLRF   1B
02C8:  CLRF   1A
02CA:  BSF    FC1.0
02CC:  BSF    FC1.1
02CE:  BSF    FC1.2
02D0:  BCF    FC1.3
02D2:  MOVLW  07
02D4:  MOVWF  FB4
02D6:  CLRF   1C
.................... {
....................    int nb_persone =0;
....................    enable_interrupts(INT_EXT);
02D8:  BSF    FF2.4
....................    enable_interrupts(INT_EXT1);
02DA:  BSF    FF0.3
....................    enable_interrupts(GLOBAL);
02DC:  MOVLW  C0
02DE:  IORWF  FF2,F
....................    setup_low_volt_detect(FALSE);
02E0:  CLRF   FD2
....................    printf("*NB*%d",nb_persone);
02E2:  MOVLW  CA
02E4:  MOVWF  FF6
02E6:  MOVLW  00
02E8:  MOVWF  FF7
02EA:  MOVLW  04
02EC:  MOVWF  1D
02EE:  RCALL  012A
02F0:  MOVFF  1C,1D
02F4:  MOVLW  18
02F6:  MOVWF  1E
02F8:  RCALL  0170
....................    while(TRUE)
....................    {  
....................       output_high(LED_PIN_GREEN);
02FA:  BCF    F93.7
02FC:  BSF    F8A.7
....................       bitsToBCD(nb_persone);
02FE:  MOVFF  1C,1D
0302:  BRA    0240
....................       
....................       delay_ms(250);
0304:  MOVLW  FA
0306:  MOVWF  20
0308:  RCALL  021A
....................       
....................       if (flag0){
030A:  BTFSS  19.0
030C:  BRA    032A
....................          flag0 =0;
030E:  BCF    19.0
....................          nb_persone++;
0310:  INCF   1C,F
....................          printf("*NB*%d",nb_persone);
0312:  MOVLW  D2
0314:  MOVWF  FF6
0316:  MOVLW  00
0318:  MOVWF  FF7
031A:  MOVLW  04
031C:  MOVWF  1D
031E:  RCALL  012A
0320:  MOVFF  1C,1D
0324:  MOVLW  18
0326:  MOVWF  1E
0328:  RCALL  0170
....................       }
....................       if (flag1){
032A:  BTFSS  19.1
032C:  BRA    034A
....................          flag1 =0;
032E:  BCF    19.1
....................          nb_persone--;
0330:  DECF   1C,F
....................          printf("*NB*%d",nb_persone);
0332:  MOVLW  DA
0334:  MOVWF  FF6
0336:  MOVLW  00
0338:  MOVWF  FF7
033A:  MOVLW  04
033C:  MOVWF  1D
033E:  RCALL  012A
0340:  MOVFF  1C,1D
0344:  MOVLW  18
0346:  MOVWF  1E
0348:  RCALL  0170
....................       }
....................       
....................       if(nb_persone == 29){
034A:  MOVF   1C,W
034C:  SUBLW  1D
034E:  BNZ   0376
....................          output_low(LED_PIN_GREEN);
0350:  BCF    F93.7
0352:  BCF    F8A.7
....................          output_high(LED_PIN_ALARM);
0354:  BCF    F93.6
0356:  BSF    F8A.6
....................          printf("ALARM ");
0358:  MOVLW  E2
035A:  MOVWF  FF6
035C:  MOVLW  00
035E:  MOVWF  FF7
0360:  BRA    0296
....................          delay_ms(2500);
0362:  MOVLW  0A
0364:  MOVWF  1D
0366:  MOVLW  FA
0368:  MOVWF  20
036A:  RCALL  021A
036C:  DECFSZ 1D,F
036E:  BRA    0366
....................          nb_persone =0;
0370:  CLRF   1C
....................          
....................          output_low(LED_PIN_ALARM );
0372:  BCF    F93.6
0374:  BCF    F8A.6
....................       }
0376:  BRA    02FA
....................       
.................... 
....................    }
.................... 
.................... }
0378:  SLEEP 

Configuration Fuses:
   Word  1: 2200   HS NOOSCSEN
   Word  2: 0E0E   PUT BROWNOUT BORV25 NOWDT WDT128
   Word  3: 0000  
   Word  4: 0081   STVREN NOLVP NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
