CCS PCH C Compiler, Version 5.101Pd, 1               22-févr.-21 14:35
Compiler operating in Evaluation Mode
To obtain a fully enabled compiler visit www.ccsinfo.com/products

               Filename:   D:\OneDrive - EPHEC asbl\2T\Elec\github\ELec2T\CCS\test.lst

               ROM used:   816 bytes (2%)
                           Largest free fragment is 31948
               RAM used:   30 (2%) at main() level
                           38 (2%) worst case
               Stack used: 3 locations (2 in main + 1 for interrupts)
               Stack size: 31

*
0000:  GOTO   0282
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  FF2.4
0056:  GOTO   0060
005A:  BTFSC  FF2.1
005C:  GOTO   00BA
0060:  BTFSS  FF0.3
0062:  GOTO   006C
0066:  BTFSC  FF0.0
0068:  GOTO   00C2
006C:  MOVFF  0E,00
0070:  MOVFF  0F,01
0074:  MOVFF  10,02
0078:  MOVFF  11,03
007C:  MOVFF  0C,FE9
0080:  MOVFF  07,FEA
0084:  BSF    07.7
0086:  MOVFF  08,FE1
008A:  MOVFF  09,FE2
008E:  MOVFF  0A,FD9
0092:  MOVFF  0B,FDA
0096:  MOVFF  12,FF3
009A:  MOVFF  13,FF4
009E:  MOVFF  14,FFA
00A2:  MOVFF  15,FF5
00A6:  MOVFF  16,FF6
00AA:  MOVFF  17,FF7
00AE:  MOVF   04,W
00B0:  MOVFF  06,FE0
00B4:  MOVFF  05,FD8
00B8:  RETFIE 0
.................... #include <test.h>
.................... #include <18F458.h>
.................... //////////// Standard Header file for the PIC18F458 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F458
*
00CA:  DATA 41,4C
00CC:  DATA 41,52
00CE:  DATA 4D,20
00D0:  DATA 00,00
00D2:  MOVF   24,W
00D4:  CLRF   01
00D6:  SUBWF  23,W
00D8:  BC    00E0
00DA:  MOVFF  23,00
00DE:  BRA    00F8
00E0:  CLRF   00
00E2:  MOVLW  08
00E4:  MOVWF  25
00E6:  RLCF   23,F
00E8:  RLCF   00,F
00EA:  MOVF   24,W
00EC:  SUBWF  00,W
00EE:  BTFSC  FD8.0
00F0:  MOVWF  00
00F2:  RLCF   01,F
00F4:  DECFSZ 25,F
00F6:  BRA    00E6
00F8:  RETURN 0
*
01B6:  MOVLW  20
01B8:  BTFSS  1E.4
01BA:  MOVLW  30
01BC:  MOVWF  1F
01BE:  MOVFF  1D,00
01C2:  BTFSS  1D.7
01C4:  BRA    01D6
01C6:  COMF   00,F
01C8:  INCF   00,F
01CA:  MOVFF  00,1D
01CE:  MOVLW  2D
01D0:  MOVWF  1F
01D2:  BSF    1E.7
01D4:  BSF    1E.0
01D6:  MOVF   01,W
01D8:  MOVFF  1D,23
01DC:  MOVLW  64
01DE:  MOVWF  24
01E0:  RCALL  00D2
01E2:  MOVFF  00,1D
01E6:  MOVLW  30
01E8:  ADDWF  01,W
01EA:  MOVWF  20
01EC:  MOVFF  1D,23
01F0:  MOVLW  0A
01F2:  MOVWF  24
01F4:  RCALL  00D2
01F6:  MOVLW  30
01F8:  ADDWF  00,W
01FA:  MOVWF  22
01FC:  MOVLW  30
01FE:  ADDWF  01,W
0200:  MOVWF  21
0202:  MOVFF  1F,00
0206:  MOVLW  30
0208:  SUBWF  20,W
020A:  BZ    0214
020C:  BSF    1E.1
020E:  BTFSC  1E.7
0210:  BSF    1E.2
0212:  BRA    0238
0214:  MOVFF  1F,20
0218:  MOVLW  20
021A:  MOVWF  1F
021C:  MOVLW  30
021E:  SUBWF  21,W
0220:  BZ    022A
0222:  BSF    1E.0
0224:  BTFSC  1E.7
0226:  BSF    1E.1
0228:  BRA    0238
022A:  BTFSS  FD8.2
022C:  BSF    1E.0
022E:  BNZ   0238
0230:  MOVFF  20,21
0234:  MOVLW  20
0236:  MOVWF  20
0238:  BTFSC  1E.2
023A:  BRA    0246
023C:  BTFSC  1E.1
023E:  BRA    024C
0240:  BTFSC  1E.0
0242:  BRA    0252
0244:  BRA    0258
0246:  MOVFF  1F,23
024A:  RCALL  0176
024C:  MOVFF  20,23
0250:  RCALL  0176
0252:  MOVFF  21,23
0256:  RCALL  0176
0258:  MOVFF  22,23
025C:  RCALL  0176
025E:  RETURN 0
0260:  TBLRD*+
0262:  MOVF   FF5,F
0264:  BZ    027E
0266:  MOVFF  FF6,1D
026A:  MOVFF  FF7,1E
026E:  MOVFF  FF5,23
0272:  RCALL  0176
0274:  MOVFF  1D,FF6
0278:  MOVFF  1E,FF7
027C:  BRA    0260
027E:  GOTO   031C (RETURN)
.................... 
.................... #list
.................... 
.................... #device ADC=10
.................... 
.................... #FUSES NOWDT                    //No Watch Dog Timer
.................... 
.................... #use delay(crystal=20000000)
*
00FA:  CLRF   FEA
00FC:  MOVLW  20
00FE:  MOVWF  FE9
0100:  MOVF   FEF,W
0102:  BZ    011E
0104:  MOVLW  06
0106:  MOVWF  01
0108:  CLRF   00
010A:  DECFSZ 00,F
010C:  BRA    010A
010E:  DECFSZ 01,F
0110:  BRA    0108
0112:  MOVLW  7B
0114:  MOVWF  00
0116:  DECFSZ 00,F
0118:  BRA    0116
011A:  DECFSZ FEF,F
011C:  BRA    0104
011E:  RETURN 0
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=PORT1,FORCE_SW)
*
0176:  BCF    F94.6
0178:  BCF    F8B.6
017A:  MOVLW  08
017C:  MOVWF  01
017E:  BRA    0180
0180:  NOP   
0182:  BSF    01.7
0184:  BRA    01A2
0186:  BCF    01.7
0188:  RRCF   23,F
018A:  BTFSC  FD8.0
018C:  BSF    F8B.6
018E:  BTFSS  FD8.0
0190:  BCF    F8B.6
0192:  BSF    01.6
0194:  BRA    01A2
0196:  BCF    01.6
0198:  DECFSZ 01,F
019A:  BRA    0188
019C:  BRA    019E
019E:  NOP   
01A0:  BSF    F8B.6
01A2:  MOVLW  A7
01A4:  MOVWF  FE9
01A6:  DECFSZ FE9,F
01A8:  BRA    01A6
01AA:  BRA    01AC
01AC:  BTFSC  01.7
01AE:  BRA    0186
01B0:  BTFSC  01.6
01B2:  BRA    0196
01B4:  RETURN 0
.................... 
.................... #define LED_PIN_ALARM PIN_B6
.................... #define LED_PIN_GREEN PIN_B7
.................... #define TENS_DISPLAY PIN_E1
.................... #define UNITY_DISPLAY PIN_E0
.................... 
.................... boolean flag0 =0;
.................... boolean flag1 =0;
.................... #INT_EXT
.................... void  EXT_isr(void) 
.................... {
....................  flag0 =1;
*
00BA:  BSF    19.0
.................... }
.................... 
00BC:  BCF    FF2.1
00BE:  GOTO   006C
.................... #INT_EXT1
.................... void  EXT1_isr(void) 
.................... {
....................    flag1 =1;
00C2:  BSF    19.1
....................    
00C4:  BCF    FF0.0
00C6:  GOTO   006C
.................... }
.................... void bitsToBCD(int value) {
*
0120:  MOVFF  1D,23
0124:  MOVLW  0A
0126:  MOVWF  24
0128:  RCALL  00D2
012A:  MOVFF  01,23
012E:  MOVLW  0A
0130:  MOVWF  24
0132:  RCALL  00D2
0134:  MOVFF  00,1E
0138:  MOVFF  1D,23
013C:  MOVLW  0A
013E:  MOVWF  24
0140:  RCALL  00D2
0142:  MOVFF  00,1F
....................    int tens = value / 10 % 10;
....................    int unity = value % 10;
....................    output_high(UNITY_DISPLAY);
0146:  BCF    F96.0
0148:  BSF    F8D.0
....................    output_low(TENS_DISPLAY);
014A:  BCF    F96.1
014C:  BCF    F8D.1
....................    output_d(tens);
014E:  CLRF   F95
0150:  MOVFF  1E,F8C
....................    output_high(TENS_DISPLAY);
0154:  BCF    F96.1
0156:  BSF    F8D.1
....................    
....................    delay_ms(10);
0158:  MOVLW  0A
015A:  MOVWF  20
015C:  RCALL  00FA
....................    output_low(UNITY_DISPLAY);
015E:  BCF    F96.0
0160:  BCF    F8D.0
....................    output_d(unity);
0162:  CLRF   F95
0164:  MOVFF  1F,F8C
....................    output_low(UNITY_DISPLAY);
0168:  BCF    F96.0
016A:  BCF    F8D.0
....................    delay_ms(10);
016C:  MOVLW  0A
016E:  MOVWF  20
0170:  RCALL  00FA
0172:  GOTO   02B6 (RETURN)
.................... }
.................... void main()
*
0282:  CLRF   FF8
0284:  BCF    FD0.7
0286:  BSF    07.7
0288:  BCF    F94.6
028A:  BSF    F8B.6
028C:  BCF    19.0
028E:  BCF    19.1
0290:  CLRF   1B
0292:  CLRF   1A
0294:  BSF    FC1.0
0296:  BSF    FC1.1
0298:  BSF    FC1.2
029A:  BCF    FC1.3
029C:  MOVLW  07
029E:  MOVWF  FB4
02A0:  CLRF   1C
.................... {
....................    int nb_persone =0;
....................    enable_interrupts(INT_EXT);
02A2:  BSF    FF2.4
....................    enable_interrupts(INT_EXT1);
02A4:  BSF    FF0.3
....................    enable_interrupts(GLOBAL);
02A6:  MOVLW  C0
02A8:  IORWF  FF2,F
....................    setup_low_volt_detect(FALSE);
02AA:  CLRF   FD2
.................... 
....................    while(TRUE)
....................    {  
....................       output_high(LED_PIN_GREEN);
02AC:  BCF    F93.7
02AE:  BSF    F8A.7
....................       bitsToBCD(nb_persone);
02B0:  MOVFF  1C,1D
02B4:  BRA    0120
....................       
....................       delay_ms(250);
02B6:  MOVLW  FA
02B8:  MOVWF  20
02BA:  RCALL  00FA
....................       
....................       if (flag0){
02BC:  BTFSS  19.0
02BE:  BRA    02E0
....................          flag0 =0;
02C0:  BCF    19.0
....................          nb_persone++;
02C2:  INCF   1C,F
....................          printf("\NP\%d ",nb_persone);
02C4:  MOVLW  4E
02C6:  MOVWF  23
02C8:  RCALL  0176
02CA:  MOVLW  50
02CC:  MOVWF  23
02CE:  RCALL  0176
02D0:  MOVFF  1C,1D
02D4:  MOVLW  18
02D6:  MOVWF  1E
02D8:  RCALL  01B6
02DA:  MOVLW  20
02DC:  MOVWF  23
02DE:  RCALL  0176
....................       }
....................       if (flag1){
02E0:  BTFSS  19.1
02E2:  BRA    0304
....................          flag1 =0;
02E4:  BCF    19.1
....................          nb_persone--;
02E6:  DECF   1C,F
....................          printf("\NP\%d ",nb_persone);
02E8:  MOVLW  4E
02EA:  MOVWF  23
02EC:  RCALL  0176
02EE:  MOVLW  50
02F0:  MOVWF  23
02F2:  RCALL  0176
02F4:  MOVFF  1C,1D
02F8:  MOVLW  18
02FA:  MOVWF  1E
02FC:  RCALL  01B6
02FE:  MOVLW  20
0300:  MOVWF  23
0302:  RCALL  0176
....................       }
....................       
....................       if(nb_persone == 29){
0304:  MOVF   1C,W
0306:  SUBLW  1D
0308:  BNZ   0330
....................          output_low(LED_PIN_GREEN);
030A:  BCF    F93.7
030C:  BCF    F8A.7
....................          output_high(LED_PIN_ALARM);
030E:  BCF    F93.6
0310:  BSF    F8A.6
....................          printf("ALARM ");
0312:  MOVLW  CA
0314:  MOVWF  FF6
0316:  MOVLW  00
0318:  MOVWF  FF7
031A:  BRA    0260
....................          delay_ms(2500);
031C:  MOVLW  0A
031E:  MOVWF  1D
0320:  MOVLW  FA
0322:  MOVWF  20
0324:  RCALL  00FA
0326:  DECFSZ 1D,F
0328:  BRA    0320
....................          nb_persone =0;
032A:  CLRF   1C
....................          
....................          output_low(LED_PIN_ALARM );
032C:  BCF    F93.6
032E:  BCF    F8A.6
....................       }
0330:  BRA    02AC
....................       
.................... 
....................    }
.................... 
.................... }
0332:  SLEEP 

Configuration Fuses:
   Word  1: 2200   HS NOOSCSEN
   Word  2: 0E0E   PUT BROWNOUT BORV25 NOWDT WDT128
   Word  3: 0000  
   Word  4: 0081   STVREN NOLVP NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
